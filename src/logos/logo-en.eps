%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 350 40
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 350 40
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.84705883 0.20784314 0.16470589 sc
q
136.56566 19.040403 m
136.36363 26.616161 129.94949 32.575756 122.37374 32.575756 c
113.43434 32.575756 l
105.75758 32.575756 99.545456 26.363636 99.545456 18.686869 c
99.545456 14.69697 101.26263 10.909091 104.24242 8.2828283 c
101.16161 1.010101 l
108.78788 5.6060605 l
110.25253 5.0505052 111.81818 4.7979798 113.43434 4.7979798 c
122.72727 4.7979798 l
130.50505 4.7979798 136.76767 11.212121 136.56566 19.040403 c
h
122.77778 9.848485 m
113.53535 9.848485 l
109.54546 9.848485 105.50505 12.979798 104.74747 16.919191 c
103.63636 22.575758 107.92929 27.525253 113.43434 27.525253 c
122.67677 27.525253 l
126.66666 27.525253 130.70708 24.39394 131.46465 20.454546 c
132.52525 14.797979 128.23233 9.848485 122.77778 9.848485 c
h
W*
0 0 350 40 rc
94.545456 37.575756 m
141.5704 37.575756 l
141.5704 -3.9898989 l
94.545456 -3.9898989 l
h
f
Q
0.21960784 0.21960784 0.21960784 sc
q
0.05050505 26.666666 m
0.05050505 31.313131 l
20.757576 31.313131 l
20.757576 26.666666 l
13.131313 26.666666 l
13.131313 6.1111112 l
7.5757575 6.1111112 l
7.5757575 26.666666 l
0.05050505 26.666666 l
h
W
0 0 350 40 rc
-4.9494948 36.313129 m
25.757576 36.313129 l
25.757576 1.1111112 l
-4.9494948 1.1111112 l
h
f
Q
q
28.383839 31.313131 m
28.383839 21.616161 l
38.585857 21.616161 l
38.585857 31.313131 l
44.141415 31.313131 l
44.141415 6.060606 l
38.585857 6.060606 l
38.585857 16.969696 l
28.383839 16.969696 l
28.383839 6.060606 l
22.828283 6.060606 l
22.828283 31.313131 l
28.383839 31.313131 l
h
W
0 0 350 40 rc
17.828283 36.313129 m
49.141415 36.313129 l
49.141415 1.060606 l
17.828283 1.060606 l
h
f
Q
q
65.252525 31.313131 m
65.252525 26.666666 l
51.919193 26.666666 l
51.919193 21.262627 l
64.141411 21.262627 l
64.141411 16.969696 l
51.919193 16.969696 l
51.919193 10.808081 l
65.505051 10.808081 l
65.505051 6.1616163 l
46.363636 6.1616163 l
46.363636 31.414141 l
65.252525 31.313131 l
h
W
0 0 350 40 rc
41.363636 36.414143 m
70.505051 36.414143 l
70.505051 1.1616162 l
41.363636 1.1616162 l
h
f
Q
q
91.414139 24.595959 m
91.060608 25.151516 90.656563 25.60606 90.202019 26.010101 c
89.191917 26.818182 87.878784 27.272728 86.565659 27.272728 c
85.454544 27.323233 84.343437 27.070707 83.383835 26.565657 c
82.525253 26.111111 81.818184 25.454546 81.262627 24.595959 c
80.707069 23.737373 80.303032 22.828283 80.050507 21.818182 c
79.797981 20.757576 79.696968 19.69697 79.696968 18.585859 c
79.696968 17.525253 79.797981 16.515152 80.050507 15.505051 c
80.303032 14.545455 80.707069 13.636364 81.262627 12.777778 c
81.818184 11.969697 82.525253 11.313131 83.383835 10.858586 c
84.343437 10.353536 85.454544 10.10101 86.565659 10.151515 c
88.030304 10.050505 89.494949 10.656566 90.555557 11.717172 c
91.565659 12.878788 92.171715 14.29293 92.323235 15.808081 c
97.676765 15.808081 l
97.57576 14.343434 97.171715 12.878788 96.565659 11.515152 c
96.010101 10.30303 95.202019 9.1919193 94.242424 8.2828283 c
93.282829 7.3737373 92.121216 6.6666665 90.858589 6.212121 c
89.494949 5.7070708 88.030304 5.5050507 86.565659 5.5050507 c
84.797981 5.4545455 82.979797 5.8080807 81.36364 6.5151515 c
79.898987 7.121212 78.535355 8.0808077 77.474747 9.2929296 c
76.414139 10.505051 75.555557 11.919192 75.050507 13.434343 c
74.494949 15.10101 74.191917 16.818182 74.191917 18.585859 c
74.191917 20.353535 74.444443 22.121212 75.050507 23.838385 c
75.606064 25.404041 76.414139 26.818182 77.474747 28.080809 c
78.535355 29.292929 79.898987 30.30303 81.414139 30.90909 c
84.343437 32.121212 87.57576 32.272728 90.555557 31.313131 c
91.767677 30.90909 92.878784 30.353535 93.888885 29.545454 c
94.898987 28.787878 95.707069 27.777779 96.313133 26.717173 c
96.969696 25.505051 97.373741 24.191919 97.525253 22.828283 c
92.121216 22.828283 l
91.919189 23.484848 91.717171 24.040403 91.414139 24.595959 c
h
W
0 0 350 40 rc
69.191917 36.938816 m
102.67677 36.938816 l
102.67677 0.50030327 l
69.191917 0.50030327 l
h
f
Q
q
144.64647 31.313131 m
155.20203 14.393939 l
155.25252 14.393939 l
155.25252 31.313131 l
160.45454 31.313131 l
160.45454 6.060606 l
154.89899 6.060606 l
144.39394 22.979797 l
144.34343 22.979797 l
144.34343 6.060606 l
139.14142 6.060606 l
139.14142 31.313131 l
144.64647 31.313131 l
h
W
0 0 350 40 rc
134.14142 36.313129 m
165.45454 36.313129 l
165.45454 1.060606 l
134.14142 1.060606 l
h
f
Q
q
170.40404 6.060606 m
162.22223 31.313131 l
167.92929 31.313131 l
173.53535 13.585858 l
173.58586 13.585858 l
179.29292 31.313131 l
185 31.313131 l
176.61617 6.060606 l
170.40404 6.060606 l
h
W
0 0 350 40 rc
157.22223 36.313129 m
190 36.313129 l
190 1.060606 l
157.22223 1.060606 l
h
f
Q
q
205.70708 31.313131 m
205.70708 26.666666 l
192.37373 26.666666 l
192.37373 21.262627 l
204.59596 21.262627 l
204.59596 16.969696 l
192.37373 16.969696 l
192.37373 10.808081 l
206.0101 10.808081 l
206.0101 6.1616163 l
186.86868 6.1616163 l
186.86868 31.414141 l
205.70708 31.313131 l
h
W
0 0 350 40 rc
181.86868 36.414143 m
211.0101 36.414143 l
211.0101 1.1616162 l
181.86868 1.1616162 l
h
f
Q
q
221.46465 31.313131 m
222.52525 31.313131 223.53535 31.161615 224.49495 30.757576 c
225.35353 30.404041 226.16162 29.898991 226.81818 29.242424 c
227.47475 28.636364 227.9798 27.878788 228.28282 27.020203 c
228.63637 26.161615 228.78787 25.252525 228.78787 24.292929 c
228.83838 22.929293 228.48485 21.616161 227.82828 20.454546 c
227.12122 19.292929 226.06061 18.434343 224.79797 17.979797 c
224.79797 17.929293 l
225.40404 17.777779 226.0101 17.474747 226.51515 17.070707 c
226.9697 16.666666 227.32323 16.212122 227.62627 15.70707 c
227.92929 15.151515 228.18182 14.59596 228.28282 13.989899 c
228.43434 13.383839 228.48485 12.727273 228.53535 12.070707 c
228.53535 11.666667 228.58586 11.212121 228.58586 10.656566 c
228.58586 10.10101 228.63637 9.545455 228.68687 8.9898987 c
228.73738 8.4343433 228.83838 7.9292932 228.9899 7.3737373 c
229.09091 6.9191918 229.29292 6.4646463 229.59596 6.060606 c
224.04041 6.060606 l
223.68687 6.969697 223.53535 7.9292932 223.48485 8.939394 c
223.43434 10.050505 223.28282 11.111111 223.18182 12.121212 c
223.08081 13.181818 222.67677 14.191919 221.9697 15 c
221.36363 15.606061 220.35353 15.909091 218.93939 15.909091 c
213.38383 15.909091 l
213.38383 6.060606 l
207.82828 6.060606 l
207.82828 31.313131 l
221.46465 31.313131 l
h
219.49495 19.898991 m
220.75757 19.898991 221.71718 20.202021 222.37373 20.757576 c
223.0303 21.313131 223.33333 22.222221 223.33333 23.535353 c
223.33333 24.747475 223.0303 25.656565 222.37373 26.212122 c
221.71718 26.767677 220.75757 27.020203 219.49495 27.020203 c
213.43434 27.020203 l
213.43434 19.898991 l
219.49495 19.898991 l
219.49495 19.898991 l
h
W
0 0 350 40 rc
202.82828 36.313129 m
234.59596 36.313129 l
234.59596 1.060606 l
202.82828 1.060606 l
h
f
Q
q
236.31313 12.323233 m
236.61617 11.767676 237.0202 11.262627 237.52525 10.909091 c
238.08081 10.505051 238.68687 10.252525 239.29292 10.10101 c
240 9.8989897 240.70708 9.848485 241.41414 9.848485 c
241.9697 9.848485 242.47475 9.8989897 242.9798 9.9494953 c
243.53535 10 244.09091 10.202021 244.54546 10.40404 c
245.05051 10.606061 245.45454 10.959596 245.80807 11.363636 c
246.16162 11.818182 246.31313 12.373737 246.31313 12.929293 c
246.31313 13.535354 246.11111 14.141414 245.65657 14.59596 c
245.15152 15.050505 244.59596 15.40404 243.93939 15.656566 c
243.18182 15.959596 242.37373 16.212122 241.51515 16.414141 c
240.60606 16.616161 239.69698 16.868687 238.78787 17.121212 c
237.82828 17.373737 236.91919 17.626263 236.0101 17.979797 c
235.15152 18.282827 234.34343 18.737373 233.58586 19.292929 c
232.0202 20.454546 231.11111 22.323233 231.21213 24.292929 c
231.16162 25.454546 231.46465 26.616161 232.0202 27.676767 c
232.57576 28.636364 233.33333 29.444445 234.24243 30.050505 c
235.15152 30.707071 236.21213 31.161615 237.27272 31.464647 c
238.38383 31.767677 239.49495 31.919191 240.65657 31.919191 c
241.91919 31.919191 243.23233 31.767677 244.44444 31.464647 c
245.60606 31.212122 246.71718 30.707071 247.67677 30.050505 c
248.63637 29.39394 249.39394 28.535353 249.89899 27.525253 c
250.50505 26.363636 250.75757 25.101009 250.70708 23.787878 c
245.35353 23.787878 l
245.35353 24.444445 245.15152 25.101009 244.84848 25.656565 c
244.59596 26.111111 244.24243 26.515152 243.78787 26.818182 c
243.33333 27.121212 242.82828 27.323233 242.27272 27.424242 c
241.66667 27.525253 241.0101 27.626263 240.40404 27.626263 c
239.94949 27.626263 239.49495 27.575758 239.04041 27.474747 c
238.58586 27.373737 238.18182 27.222221 237.82828 26.969696 c
237.47475 26.717173 237.17172 26.464647 236.91919 26.060606 c
236.66667 25.656565 236.56566 25.202021 236.56566 24.69697 c
236.56566 24.292929 236.66667 23.838385 236.86868 23.484848 c
237.17172 23.080809 237.52525 22.828283 237.9798 22.626263 c
238.73738 22.323233 239.49495 22.070707 240.25252 21.868687 c
241.21213 21.616161 242.52525 21.262627 244.09091 20.858585 c
244.54546 20.757576 245.20203 20.60606 246.06061 20.353535 c
246.9697 20.101009 247.77777 19.69697 248.53535 19.191919 c
249.39394 18.636364 250.10101 17.878788 250.65657 17.020203 c
251.31313 15.959596 251.61617 14.747475 251.56566 13.535354 c
251.56566 12.424242 251.36363 11.313131 250.90909 10.30303 c
250.45454 9.2929296 249.74748 8.4343433 248.88889 7.7272725 c
247.92929 6.969697 246.81818 6.4141412 245.60606 6.060606 c
244.14142 5.6565657 242.57576 5.4545455 241.06061 5.4545455 c
239.69698 5.4545455 238.33333 5.6060605 237.0202 5.9595962 c
235.75757 6.2626262 234.59596 6.818182 233.53535 7.5757575 c
232.52525 8.333333 231.71718 9.2929296 231.16162 10.40404 c
230.55556 11.666667 230.25252 13.030303 230.30302 14.444445 c
235.85858 14.444445 l
235.80807 13.737373 235.95959 12.979798 236.31313 12.323233 c
h
W
0 0 350 40 rc
225.29761 36.919193 m
256.57108 36.919193 l
256.57108 0.45454547 l
225.29761 0.45454547 l
h
f
Q
q
266.9697 31.313131 m
276.41415 6.060606 l
270.65656 6.060606 l
268.73737 11.717172 l
259.29294 11.717172 l
257.32324 6.1111112 l
251.71718 6.1111112 l
261.26263 31.363636 l
266.9697 31.313131 l
h
267.27274 15.858586 m
264.09091 25.101009 l
264.04041 25.101009 l
260.75757 15.858586 l
267.27274 15.858586 l
h
W
0 0 350 40 rc
246.71718 36.363636 m
281.41415 36.363636 l
281.41415 1.060606 l
246.71718 1.060606 l
h
f
Q
q
271.76767 26.666666 m
271.76767 31.313131 l
292.42426 31.313131 l
292.42426 26.666666 l
284.84848 26.666666 l
284.84848 6.1111112 l
279.29294 6.1111112 l
279.29294 26.666666 l
271.76767 26.666666 l
h
W
0 0 350 40 rc
266.76767 36.313129 m
297.42426 36.313129 l
297.42426 1.1111112 l
266.76767 1.1111112 l
h
f
Q
q
300.10101 31.313131 m
300.10101 6.060606 l
294.54544 6.060606 l
294.54544 31.313131 l
300.10101 31.313131 l
h
W
0 0 350 40 rc
289.54544 36.313129 m
305.10101 36.313129 l
305.10101 1.060606 l
289.54544 1.060606 l
h
f
Q
q
302.72726 23.838385 m
303.28284 25.404041 304.09091 26.818182 305.15152 28.080809 c
306.21213 29.292929 307.57574 30.30303 309.09091 30.90909 c
312.42426 32.272728 316.21213 32.272728 319.54544 30.90909 c
321.0101 30.252525 322.37375 29.292929 323.43436 28.080809 c
324.49496 26.818182 325.35355 25.404041 325.85858 23.838385 c
326.41415 22.171717 326.71716 20.353535 326.71716 18.585859 c
326.71716 16.818182 326.46466 15.10101 325.85858 13.434343 c
325.30304 11.919192 324.49496 10.505051 323.43436 9.2929296 c
322.37375 8.0808077 321.0101 7.1717172 319.54544 6.5151515 c
316.21213 5.151515 312.47476 5.151515 309.09091 6.5151515 c
307.62625 7.121212 306.26263 8.0808077 305.20203 9.2929296 c
304.14142 10.505051 303.28284 11.919192 302.77777 13.434343 c
302.22223 15.10101 301.91919 16.818182 301.91919 18.585859 c
301.86868 20.353535 302.17172 22.171717 302.72726 23.838385 c
h
307.82828 15.505051 m
308.08081 14.545455 308.43436 13.636364 308.9899 12.777778 c
309.54544 11.969697 310.25253 11.313131 311.11111 10.858586 c
313.13132 9.8989897 315.45456 9.8989897 317.47476 10.858586 c
318.33334 11.313131 319.04041 11.969697 319.59595 12.777778 c
320.15152 13.585858 320.55554 14.494949 320.75757 15.505051 c
321.0101 16.515152 321.11111 17.575758 321.11111 18.585859 c
321.11111 19.646465 321.0101 20.757576 320.75757 21.818182 c
320.55554 22.828283 320.15152 23.737373 319.59595 24.595959 c
319.04041 25.404041 318.33334 26.060606 317.47476 26.565657 c
315.45456 27.525253 313.13132 27.525253 311.11111 26.565657 c
310.25253 26.111111 309.54544 25.404041 308.9899 24.595959 c
308.43436 23.737373 308.0303 22.828283 307.82828 21.818182 c
307.57574 20.757576 307.47476 19.69697 307.47476 18.585859 c
307.42426 17.575758 307.57574 16.515152 307.82828 15.505051 c
h
W
0 0 350 40 rc
296.91376 36.93182 m
331.71716 36.93182 l
331.71716 0.49242425 l
296.91376 0.49242425 l
h
f
Q
q
333.88889 31.313131 m
344.44446 14.393939 l
344.49496 14.393939 l
344.49496 31.313131 l
349.69696 31.313131 l
349.69696 6.060606 l
344.14142 6.060606 l
333.63635 22.979797 l
333.58585 22.979797 l
333.58585 6.060606 l
328.38385 6.060606 l
328.38385 31.313131 l
333.88889 31.313131 l
h
W
0 0 350 40 rc
323.38385 36.313129 m
354.69696 36.313129 l
354.69696 1.060606 l
323.38385 1.060606 l
h
f
ep
end
%%Trailer
%%EOF
