%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 350 40
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 350 40
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.84705883 0.20784314 0.16470589 sc
q
101.06061 32.575756 m
91.818184 32.575756 l
84.141411 32.575756 77.929291 26.363636 77.929291 18.737373 c
77.929291 14.747475 79.646461 10.959596 82.626259 8.333333 c
79.545456 1.060606 l
87.171715 5.6565657 l
88.63636 5.1010103 90.202019 4.848485 91.818184 4.848485 c
100.75758 4.848485 l
108.33334 4.848485 114.74747 10.808081 114.94949 18.383839 c
115.15151 26.161615 108.83839 32.575756 101.06061 32.575756 c
101.06061 32.575756 l
h
101.11111 9.848485 m
91.86869 9.848485 l
87.878784 9.848485 83.838387 12.979798 83.080811 16.919191 c
81.969696 22.575758 86.262627 27.525253 91.767677 27.525253 c
101.0101 27.525253 l
105 27.525253 109.04041 24.39394 109.79798 20.454546 c
110.85859 14.797979 106.56566 9.848485 101.11111 9.848485 c
101.11111 9.848485 l
h
W*
0 0 350 40 rc
72.929291 37.575756 m
119.95421 37.575756 l
119.95421 -3.939394 l
72.929291 -3.939394 l
h
f
Q
0.21960784 0.21960784 0.21960784 sc
q
69.747475 24.595959 m
69.393936 25.151516 68.989899 25.60606 68.535355 26.010101 c
68.030304 26.414141 67.474747 26.717173 66.86869 26.969696 c
66.262627 27.171717 65.555557 27.323233 64.898987 27.323233 c
63.78788 27.373737 62.676769 27.121212 61.717171 26.616161 c
60.858585 26.161615 60.151516 25.505051 59.595959 24.646465 c
59.040405 23.787878 58.636364 22.878788 58.434345 21.868687 c
58.18182 20.808081 58.080807 19.747475 58.080807 18.636364 c
58.080807 17.575758 58.18182 16.565657 58.434345 15.555555 c
58.686871 14.59596 59.090908 13.686869 59.646465 12.828282 c
60.202019 12.020202 60.909092 11.363636 61.767677 10.909091 c
62.727272 10.40404 63.838383 10.151515 64.949493 10.202021 c
66.414139 10.10101 67.878784 10.70707 68.888885 11.717172 c
69.898987 12.878788 70.505051 14.29293 70.656563 15.808081 c
76.010101 15.808081 l
75.909088 14.343434 75.505051 12.878788 74.898987 11.515152 c
74.343437 10.30303 73.535355 9.1919193 72.57576 8.2828283 c
71.616165 7.3737373 70.454544 6.6666665 69.191917 6.212121 c
67.828285 5.7070708 66.36364 5.5050507 64.898987 5.5050507 c
63.131313 5.4545455 61.313129 5.8080807 59.696968 6.5151515 c
58.232323 7.121212 56.868687 8.0808077 55.808083 9.2929296 c
54.747475 10.505051 53.888889 11.919192 53.383839 13.434343 c
52.828281 15.10101 52.525253 16.818182 52.525253 18.585859 c
52.525253 20.353535 52.777779 22.171717 53.383839 23.838385 c
53.939392 25.404041 54.747475 26.818182 55.808083 28.080809 c
56.868687 29.292929 58.232323 30.252525 59.696968 30.90909 c
62.626263 32.121212 65.858589 32.272728 68.838387 31.313131 c
70.050507 30.90909 71.161613 30.353535 72.171715 29.545454 c
73.181816 28.787878 73.989899 27.777779 74.595963 26.717173 c
75.252525 25.505051 75.656563 24.191919 75.808083 22.828283 c
70.454544 22.828283 l
70.303032 23.484848 70.101013 24.09091 69.747475 24.595959 c
h
W
0 0 350 40 rc
47.525253 36.938816 m
81.010101 36.938816 l
81.010101 0.50030327 l
47.525253 0.50030327 l
h
f
Q
q
270.85858 24.595959 m
270.50504 25.151516 270.10101 25.60606 269.59595 26.010101 c
269.09091 26.414141 268.53534 26.717173 267.92929 26.969696 c
267.32324 27.171717 266.61615 27.323233 265.95959 27.323233 c
264.84848 27.373737 263.73737 27.121212 262.77777 26.616161 c
261.91919 26.161615 261.21213 25.505051 260.65656 24.646465 c
260.10101 23.787878 259.69696 22.878788 259.49496 21.868687 c
259.24243 20.808081 259.14142 19.747475 259.14142 18.636364 c
259.14142 17.575758 259.24243 16.565657 259.49496 15.555555 c
259.74747 14.59596 260.15152 13.686869 260.65656 12.828282 c
261.21213 12.020202 261.91919 11.363636 262.77777 10.909091 c
263.73737 10.40404 264.84848 10.151515 265.95959 10.202021 c
267.42426 10.10101 268.88889 10.656566 269.94949 11.717172 c
270.95959 12.878788 271.56564 14.29293 271.71716 15.858586 c
277.07071 15.858586 l
276.9697 14.393939 276.56564 12.929293 275.95959 11.565657 c
275.40405 10.353536 274.59595 9.242424 273.63635 8.333333 c
272.67676 7.4242425 271.51514 6.7171717 270.25253 6.2626262 c
268.88889 5.757576 267.42426 5.5555553 265.95959 5.5555553 c
264.19193 5.5050507 262.37375 5.8585858 260.75757 6.5656567 c
259.29294 7.2222223 257.92929 8.1313133 256.86868 9.3434343 c
255.80807 10.555555 254.94949 11.969697 254.44444 13.484848 c
253.88889 15.151515 253.58586 16.868687 253.58586 18.636364 c
253.58586 20.404041 253.83838 22.222221 254.44444 23.888889 c
255 25.454546 255.80807 26.868687 256.86868 28.131313 c
257.92929 29.343435 259.29294 30.30303 260.75757 30.959597 c
263.68686 32.171719 266.91919 32.323231 269.89899 31.363636 c
271.11111 30.959597 272.22223 30.404041 273.18182 29.595959 c
274.19193 28.838385 275 27.828283 275.60605 26.767677 c
276.26263 25.555555 276.66666 24.242424 276.81818 22.878788 c
271.46466 22.878788 l
271.41415 23.484848 271.21213 24.09091 270.85858 24.595959 c
h
W
0 0 350 40 rc
248.58586 36.989319 m
282.07071 36.989319 l
282.07071 0.55080831 l
248.58586 0.55080831 l
h
f
Q
q
122.9798 31.363636 m
133.53535 14.444445 l
133.58586 14.444445 l
133.58586 31.363636 l
138.78787 31.363636 l
138.78787 6.1111112 l
133.23233 6.1111112 l
122.72727 23.030304 l
122.67677 23.030304 l
122.67677 6.1111112 l
117.52525 6.1111112 l
117.52525 31.363636 l
122.9798 31.363636 l
h
W
0 0 350 40 rc
112.52525 36.363636 m
143.78787 36.363636 l
143.78787 1.1111112 l
112.52525 1.1111112 l
h
f
Q
q
148.78787 6.1111112 m
140.60606 31.363636 l
146.31313 31.363636 l
151.91919 13.636364 l
151.9697 13.636364 l
157.67677 31.363636 l
163.38383 31.363636 l
155.05051 6.1111112 l
148.78787 6.1111112 l
h
W
0 0 350 40 rc
135.60606 36.363636 m
168.38383 36.363636 l
168.38383 1.1111112 l
135.60606 1.1111112 l
h
f
Q
q
184.04041 31.363636 m
184.04041 26.717173 l
170.70708 26.717173 l
170.70708 21.313131 l
182.92929 21.313131 l
182.92929 17.020203 l
170.70708 17.020203 l
170.70708 10.858586 l
184.34343 10.858586 l
184.34343 6.212121 l
165.15152 6.212121 l
165.15152 31.464647 l
184.04041 31.363636 l
h
W
0 0 350 40 rc
160.15152 36.464645 m
189.34343 36.464645 l
189.34343 1.2121212 l
160.15152 1.2121212 l
h
f
Q
q
199.79797 31.363636 m
200.85858 31.363636 201.86868 31.212122 202.87878 30.808081 c
203.73738 30.454546 204.54546 29.949495 205.20203 29.292929 c
205.85858 28.686869 206.36363 27.929293 206.66667 27.070707 c
207.0202 26.212122 207.17172 25.30303 207.17172 24.343435 c
207.22223 22.979797 206.86868 21.666666 206.21213 20.505051 c
205.50505 19.343435 204.44444 18.484848 203.13132 18.030304 c
203.13132 17.979797 l
203.73738 17.828283 204.34343 17.525253 204.84848 17.121212 c
205.30302 16.717173 205.65657 16.262627 205.95959 15.757576 c
206.26262 15.202021 206.46465 14.59596 206.56566 13.989899 c
206.71718 13.383839 206.76767 12.727273 206.81818 12.070707 c
206.81818 11.666667 206.86868 11.212121 206.86868 10.656566 c
206.86868 10.10101 206.91919 9.545455 206.9697 8.9898987 c
207.0202 8.4343433 207.12122 7.9292932 207.27272 7.3737373 c
207.37373 6.9191918 207.57576 6.4646463 207.82828 6.060606 c
202.27272 6.060606 l
201.91919 6.969697 201.76767 7.9292932 201.71718 8.939394 c
201.66667 10.050505 201.51515 11.111111 201.41414 12.121212 c
201.31313 13.181818 200.90909 14.191919 200.20203 15 c
199.59596 15.606061 198.58586 15.909091 197.17172 15.909091 c
191.61617 15.909091 l
191.61617 6.0101008 l
186.06061 6.0101008 l
186.06061 31.262627 l
199.79797 31.363636 l
h
197.82828 19.949495 m
199.09091 19.949495 200.05051 20.252525 200.70708 20.808081 c
201.36363 21.363636 201.66667 22.272728 201.66667 23.585859 c
201.66667 24.797979 201.36363 25.707071 200.70708 26.262627 c
200.05051 26.818182 199.09091 27.070707 197.82828 27.070707 c
191.76767 27.070707 l
191.76767 19.949495 l
197.82828 19.949495 l
h
W
0 0 350 40 rc
181.06061 36.363636 m
212.82828 36.363636 l
212.82828 1.010101 l
181.06061 1.010101 l
h
f
Q
q
214.64647 12.323233 m
214.94949 11.767676 215.35353 11.262627 215.85858 10.909091 c
216.41414 10.505051 217.0202 10.252525 217.67677 10.10101 c
218.38383 9.8989897 219.09091 9.848485 219.79797 9.848485 c
220.35353 9.848485 220.85858 9.8989897 221.36363 9.9494953 c
221.91919 10.050505 222.47475 10.202021 222.92929 10.40404 c
223.43434 10.606061 223.83838 10.959596 224.19193 11.363636 c
224.54546 11.818182 224.69698 12.373737 224.69698 12.929293 c
224.74748 13.535354 224.49495 14.141414 224.04041 14.59596 c
223.53535 15.050505 222.9798 15.40404 222.32323 15.656566 c
221.56566 15.959596 220.75757 16.212122 219.89899 16.414141 c
218.9899 16.616161 218.08081 16.868687 217.17172 17.121212 c
216.21213 17.373737 215.30302 17.626263 214.39394 17.979797 c
213.53535 18.282827 212.72728 18.737373 211.9697 19.292929 c
211.26262 19.848484 210.65657 20.505051 210.25252 21.313131 c
209.79797 22.222221 209.54546 23.232323 209.59596 24.242424 c
209.54546 25.404041 209.84848 26.565657 210.40404 27.626263 c
210.95959 28.585859 211.66667 29.39394 212.57576 30 c
213.48485 30.656565 214.49495 31.111111 215.60606 31.414141 c
216.71718 31.717173 217.82828 31.868687 218.9899 31.868687 c
220.25252 31.868687 221.56566 31.717173 222.77777 31.414141 c
223.93939 31.161615 225.05051 30.656565 226.0101 30 c
226.9697 29.343435 227.72728 28.484848 228.28282 27.474747 c
228.83838 26.313131 229.14142 25.050505 229.09091 23.787878 c
223.73738 23.787878 l
223.73738 24.444445 223.53535 25.101009 223.28282 25.656565 c
223.0303 26.111111 222.67677 26.515152 222.22223 26.818182 c
221.76767 27.121212 221.26262 27.323233 220.70708 27.424242 c
220.10101 27.525253 219.44444 27.626263 218.78787 27.626263 c
218.33333 27.626263 217.87878 27.575758 217.42424 27.474747 c
216.9697 27.373737 216.56566 27.222221 216.21213 26.969696 c
215.85858 26.717173 215.55556 26.464647 215.30302 26.060606 c
215.05051 25.656565 214.94949 25.202021 214.94949 24.69697 c
214.94949 24.292929 215.05051 23.838385 215.25252 23.484848 c
215.55556 23.080809 215.90909 22.828283 216.36363 22.626263 c
217.12122 22.323233 217.87878 22.020203 218.63637 21.868687 c
219.59596 21.616161 220.90909 21.262627 222.47475 20.858585 c
222.92929 20.757576 223.58586 20.60606 224.44444 20.353535 c
225.35353 20.101009 226.16162 19.69697 226.91919 19.191919 c
227.77777 18.636364 228.48485 17.878788 229.04041 17.020203 c
229.69698 15.959596 230 14.747475 229.94949 13.535354 c
229.94949 12.424242 229.74748 11.313131 229.29292 10.30303 c
228.83838 9.2929296 228.13132 8.4343433 227.27272 7.7272725 c
226.31313 6.969697 225.20203 6.4141412 223.9899 6.060606 c
222.52525 5.6565657 220.95959 5.4545455 219.44444 5.4545455 c
218.08081 5.4545455 216.71718 5.6060605 215.40404 5.9595962 c
214.14142 6.2626262 212.9798 6.818182 211.91919 7.5757575 c
210.90909 8.2828283 210.10101 9.242424 209.54546 10.353536 c
208.93939 11.616161 208.63637 12.979798 208.68687 14.393939 c
214.04041 14.393939 l
214.19193 13.737373 214.34343 13.030303 214.64647 12.323233 c
h
W
0 0 350 40 rc
203.68144 36.868687 m
234.95491 36.868687 l
234.95491 0.45454547 l
203.68144 0.45454547 l
h
f
Q
q
245.30302 31.363636 m
254.74748 6.1111112 l
248.9899 6.1111112 l
247.07071 11.717172 l
237.62627 11.717172 l
235.65657 6.1111112 l
230.05051 6.1111112 l
239.59596 31.363636 l
245.30302 31.363636 l
h
245.65657 15.858586 m
242.47475 25.101009 l
242.42424 25.101009 l
239.14142 15.858586 l
245.65657 15.858586 l
h
W
0 0 350 40 rc
225.05051 36.363636 m
259.74747 36.363636 l
259.74747 1.1111112 l
225.05051 1.1111112 l
h
f
Q
q
284.54544 31.363636 m
284.54544 6.1111112 l
278.9899 6.1111112 l
278.9899 31.363636 l
284.54544 31.363636 l
h
W
0 0 350 40 rc
273.9899 36.363636 m
289.54544 36.363636 l
289.54544 1.1111112 l
273.9899 1.1111112 l
h
f
Q
q
318.33334 31.363636 m
328.88889 14.444445 l
328.93939 14.444445 l
328.93939 31.363636 l
334.14142 31.363636 l
334.14142 6.1111112 l
328.58585 6.1111112 l
318.08081 23.030304 l
318.0303 23.030304 l
318.0303 6.1111112 l
312.82828 6.1111112 l
312.82828 31.363636 l
318.33334 31.363636 l
h
W
0 0 350 40 rc
307.82828 36.363636 m
339.14142 36.363636 l
339.14142 1.1111112 l
307.82828 1.1111112 l
h
f
Q
q
5.5555553 31.414141 m
5.5555553 10.858586 l
17.828283 10.858586 l
17.828283 6.1616163 l
0 6.1616163 l
0 31.414141 l
5.5555553 31.414141 l
h
W
0 0 350 40 rc
-5 36.414143 m
22.828283 36.414143 l
22.828283 1.1616162 l
-5 1.1616162 l
h
f
Q
q
34.848484 31.414141 m
44.242424 6.1616163 l
38.484848 6.1616163 l
36.565655 11.818182 l
27.171717 11.818182 l
25.151516 6.1616163 l
19.595959 6.1616163 l
29.141415 31.414141 l
34.848484 31.414141 l
h
35.151516 15.909091 m
31.969696 25.151516 l
31.919191 25.151516 l
28.585859 15.909091 l
35.151516 15.909091 l
h
W
0 0 350 40 rc
14.59596 36.414143 m
49.242424 36.414143 l
49.242424 1.1616162 l
14.59596 1.1616162 l
h
f
Q
q
287.17172 23.888889 m
287.72726 25.454546 288.53534 26.868687 289.59595 28.131313 c
290.65656 29.343435 292.0202 30.30303 293.48486 30.959597 c
296.81818 32.323231 300.60605 32.323231 303.93939 30.959597 c
305.40405 30.30303 306.76767 29.343435 307.82828 28.131313 c
308.88889 26.919191 309.74747 25.454546 310.25253 23.888889 c
310.80807 22.222221 311.11111 20.404041 311.06061 18.636364 c
311.06061 16.868687 310.80807 15.151515 310.20203 13.484848 c
309.64645 11.969697 308.83838 10.555555 307.77777 9.3434343 c
306.71716 8.1313133 305.35355 7.2222223 303.88889 6.5656567 c
300.55554 5.2020202 296.76767 5.2020202 293.43436 6.5656567 c
291.9697 7.2222223 290.60605 8.1313133 289.54544 9.3434343 c
288.48486 10.555555 287.62625 11.969697 287.12122 13.484848 c
286.56564 15.151515 286.26263 16.868687 286.26263 18.636364 c
286.26263 20.404041 286.56564 22.171717 287.17172 23.888889 c
h
292.22223 15.555555 m
292.47476 14.59596 292.87878 13.686869 293.43436 12.828282 c
293.9899 12.020202 294.69696 11.363636 295.55554 10.909091 c
297.57574 9.9494953 299.89899 9.9494953 301.91919 10.909091 c
302.77777 11.363636 303.48486 12.020202 304.04041 12.828282 c
304.59595 13.636364 305 14.545455 305.20203 15.555555 c
305.45456 16.565657 305.55554 17.626263 305.55554 18.636364 c
305.55554 19.69697 305.40405 20.808081 305.15152 21.818182 c
304.94949 22.828283 304.54544 23.737373 303.9899 24.595959 c
303.43436 25.404041 302.72726 26.060606 301.86868 26.565657 c
299.84848 27.525253 297.52524 27.525253 295.50504 26.565657 c
294.64645 26.111111 293.93939 25.454546 293.38385 24.595959 c
292.82828 23.737373 292.42426 22.828283 292.22223 21.818182 c
291.9697 20.757576 291.86868 19.69697 291.86868 18.585859 c
291.86868 17.575758 291.9697 16.515152 292.22223 15.555555 c
292.22223 15.555555 l
h
299.59595 39.848484 m
295.85858 33.585857 l
299.34344 33.585857 l
305.15152 39.848484 l
299.59595 39.848484 l
h
W
0 0 350 40 rc
281.26263 44.848484 m
316.06604 44.848484 l
316.06604 0.54292929 l
281.26263 0.54292929 l
h
f
ep
end
%%Trailer
%%EOF
