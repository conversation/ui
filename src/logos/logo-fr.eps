%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 693 78
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 693 78
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.84705883 0.21176471 0.16078432 sc
q
200.10001 63.299999 m
181.8 63.299999 l
166.60001 63.299999 154.3 51 154.3 35.799999 c
154.3 27.9 157.7 20.4 163.60001 15.1 c
157.5 0.69999999 l
172.60001 9.8000002 l
175.5 8.6999998 178.60001 8.1999998 181.8 8.1999998 c
200.10001 8.1999998 l
215.3 8.5 227.39999 21 227.10001 36.200001 c
226.8 51.099998 214.89999 63 200.10001 63.299999 c
200.10001 63.299999 l
h
200.2 18.299999 m
181.89999 18.299999 l
174 18.299999 166 24.5 164.5 32.299999 c
162.3 43.5 170.8 53.299999 181.7 53.299999 c
200 53.299999 l
207.89999 53.299999 215.89999 47.099998 217.39999 39.299999 c
219.5 28.1 211 18.299999 200.2 18.299999 c
h
W*
0 0 693 78 rc
149.3 68.300003 m
232.10545 68.300003 l
232.10545 -4.3000002 l
149.3 -4.3000002 l
h
f
Q
0.21960784 0.21960784 0.21960784 sc
q
138.10001 47.799999 m
137.39999 48.900002 136.60001 49.799999 135.7 50.599998 c
133.60001 52.200001 131.10001 53.099998 128.5 53.099998 c
126.3 53.200001 124.1 52.700001 122.2 51.700001 c
120.5 50.799999 119.1 49.5 118 47.799999 c
116.9 46.099998 116.1 44.299999 115.7 42.299999 c
115.2 40.200001 115 38.099998 115 35.900002 c
115 33.799999 115.2 31.799999 115.7 29.799999 c
116.2 27.9 117 26.1 118.1 24.5 c
119.2 22.9 120.6 21.6 122.3 20.700001 c
124.2 19.700001 126.4 19.200001 128.60001 19.299999 c
131.5 19.1 134.39999 20.299999 136.5 22.4 c
138.5 24.700001 139.7 27.5 140 30.5 c
150.60001 30.5 l
150.39999 27.6 149.60001 24.700001 148.39999 22 c
147.3 19.6 145.7 17.4 143.8 15.6 c
141.89999 13.8 139.60001 12.4 137.10001 11.5 c
134.39999 10.5 131.5 10.1 128.60001 10.1 c
125.1 10 121.5 10.7 118.3 12.1 c
115.4 13.4 112.7 15.2 110.6 17.6 c
108.5 20 106.8 22.799999 105.8 25.799999 c
104.7 29.1 104.1 32.5 104.1 36 c
104.1 39.5 104.6 43 105.8 46.400002 c
106.9 49.5 108.5 52.299999 110.6 54.799999 c
112.7 57.200001 115.4 59.099998 118.3 60.400002 c
124.1 62.799999 130.5 63.099998 136.39999 61.200001 c
138.8 60.400002 141 59.299999 143 57.700001 c
144.89999 56.200001 146.5 54.200001 147.7 52.099998 c
149 49.700001 149.8 47.099998 150.10001 44.400002 c
139.5 44.400002 l
139.2 45.5 138.8 46.700001 138.10001 47.799999 c
h
W
0 0 693 78 rc
99.099998 67.438858 m
155.60001 67.438858 l
155.60001 5.0906005 l
99.099998 5.0906005 l
h
f
Q
q
243.5 61.099998 m
264.39999 27.6 l
264.5 27.6 l
264.5 61.099998 l
274.79999 61.099998 l
274.79999 11.1 l
263.79999 11.1 l
243 44.599998 l
242.89999 44.599998 l
242.89999 11.1 l
232.7 11.1 l
232.7 61.099998 l
243.5 61.099998 l
h
W
0 0 693 78 rc
227.7 66.099998 m
279.79999 66.099998 l
279.79999 6.0999999 l
227.7 6.0999999 l
h
f
Q
q
294.60001 11.1 m
278.39999 61.099998 l
289.70001 61.099998 l
300.79999 26 l
300.89999 26 l
312.20001 61.099998 l
323.5 61.099998 l
307 11.1 l
294.60001 11.1 l
h
W
0 0 693 78 rc
273.39999 66.099998 m
328.5 66.099998 l
328.5 6.0999999 l
273.39999 6.0999999 l
h
f
Q
q
364.39999 61.099998 m
364.39999 51.900002 l
338 51.900002 l
338 41.200001 l
362.20001 41.200001 l
362.20001 32.700001 l
338 32.700001 l
338 20.5 l
365 20.5 l
365 11.3 l
327 11.3 l
327 61.299999 l
364.39999 61.099998 l
h
W
0 0 693 78 rc
322 66.300003 m
370 66.300003 l
370 6.3000002 l
322 6.3000002 l
h
f
Q
q
395.60001 61.099998 m
397.70001 61.099998 399.70001 60.799999 401.70001 60 c
403.39999 59.299999 405 58.299999 406.29999 57 c
407.60001 55.799999 408.60001 54.299999 409.20001 52.599998 c
409.89999 50.900002 410.20001 49.099998 410.20001 47.299999 c
410.29999 44.599998 409.60001 42 408.29999 39.700001 c
406.89999 37.400002 404.79999 35.700001 402.20001 34.799999 c
402.20001 34.700001 l
403.39999 34.400002 404.60001 33.799999 405.60001 33 c
406.5 32.200001 407.20001 31.299999 407.79999 30.299999 c
408.39999 29.200001 408.79999 28 409 26.799999 c
409.29999 25.6 409.39999 24.299999 409.5 23 c
409.5 22.200001 409.60001 21.299999 409.60001 20.200001 c
409.60001 19.1 409.70001 18 409.79999 16.9 c
409.89999 15.8 410.10001 14.8 410.39999 13.7 c
410.60001 12.8 411 11.9 411.5 11.1 c
400.5 11.1 l
399.79999 12.9 399.5 14.8 399.39999 16.799999 c
399.29999 19 399 21.1 398.79999 23.1 c
398.60001 25.200001 397.79999 27.200001 396.39999 28.799999 c
395.20001 30 393.20001 30.6 390.39999 30.6 c
379.39999 30.6 l
379.39999 11.1 l
368.39999 11.1 l
368.39999 61.099998 l
395.60001 61.099998 l
h
391.70001 38.5 m
394.20001 38.5 396.10001 39.099998 397.39999 40.200001 c
398.70001 41.299999 399.29999 43.099998 399.29999 45.700001 c
399.29999 48.099998 398.70001 49.900002 397.39999 51 c
396.10001 52.099998 394.20001 52.599998 391.70001 52.599998 c
379.70001 52.599998 l
379.70001 38.5 l
391.70001 38.5 l
391.70001 38.5 l
h
W
0 0 693 78 rc
363.39999 66.099998 m
416.5 66.099998 l
416.5 6.0999999 l
363.39999 6.0999999 l
h
f
Q
q
425 23.4 m
425.60001 22.299999 426.39999 21.299999 427.39999 20.6 c
428.5 19.799999 429.70001 19.299999 431 19 c
432.39999 18.6 433.79999 18.5 435.20001 18.5 c
436.29999 18.5 437.29999 18.6 438.29999 18.700001 c
439.39999 18.9 440.5 19.200001 441.39999 19.700001 c
442.39999 20.1 443.20001 20.799999 443.89999 21.6 c
444.60001 22.5 444.89999 23.6 444.89999 24.700001 c
444.89999 25.9 444.5 27.1 443.60001 28 c
442.60001 28.9 441.5 29.6 440.20001 30.1 c
438.70001 30.700001 437.10001 31.200001 435.39999 31.6 c
433.60001 32 431.79999 32.5 430 33 c
428.10001 33.5 426.29999 34 424.5 34.700001 c
422.79999 35.299999 421.20001 36.200001 419.70001 37.299999 c
416.60001 39.599998 414.89999 43.299999 415 47.200001 c
414.89999 49.5 415.5 51.799999 416.60001 53.900002 c
417.70001 55.799999 419.10001 57.400002 420.89999 58.599998 c
422.70001 59.900002 424.79999 60.799999 426.89999 61.400002 c
429.10001 62 431.29999 62.299999 433.60001 62.299999 c
436.10001 62.299999 438.70001 62 441.10001 61.400002 c
443.39999 60.900002 445.60001 59.900002 447.5 58.599998 c
449.39999 57.299999 450.89999 55.599998 452 53.599998 c
453.20001 51.299999 453.70001 48.799999 453.60001 46.200001 c
443 46.200001 l
443 47.5 442.60001 48.799999 442.10001 49.900002 c
441.60001 50.799999 440.89999 51.599998 440 52.200001 c
439.10001 52.799999 438.10001 53.200001 437 53.400002 c
435.79999 53.599998 434.5 53.799999 433.20001 53.799999 c
432.29999 53.799999 431.39999 53.700001 430.5 53.5 c
429.60001 53.299999 428.79999 53 428.10001 52.5 c
427.39999 52 426.79999 51.5 426.29999 50.700001 c
425.79999 49.900002 425.60001 49 425.60001 48 c
425.60001 47.200001 425.79999 46.299999 426.20001 45.599998 c
426.70001 44.799999 427.5 44.200001 428.39999 43.900002 c
429.89999 43.299999 431.39999 42.700001 432.89999 42.400002 c
434.79999 41.900002 437.39999 41.200001 440.5 40.400002 c
441.39999 40.200001 442.70001 39.900002 444.39999 39.400002 c
446.10001 38.900002 447.79999 38.099998 449.29999 37.099998 c
451 36 452.39999 34.5 453.5 32.799999 c
454.79999 30.700001 455.39999 28.299999 455.29999 25.9 c
455.29999 23.700001 454.89999 21.5 454 19.5 c
453.10001 17.5 451.70001 15.8 450 14.4 c
448.10001 12.9 445.89999 11.8 443.5 11.1 c
440.60001 10.3 437.5 9.8999996 434.5 9.8999996 c
431.79999 9.8999996 429.10001 10.2 426.5 10.9 c
424 11.5 421.70001 12.6 419.60001 14.1 c
417.60001 15.5 416 17.4 414.89999 19.6 c
413.70001 22.1 413.10001 24.799999 413.20001 27.6 c
423.79999 27.6 l
424 26.200001 424.39999 24.799999 425 23.4 c
h
W
0 0 693 78 rc
408.18924 67.300003 m
460.3107 67.300003 l
460.3107 4.9000001 l
408.18924 4.9000001 l
h
f
Q
q
485.70001 61.099998 m
504.39999 11.1 l
493 11.1 l
489.20001 22.200001 l
470.5 22.200001 l
466.60001 11.1 l
455.5 11.1 l
474.39999 61.099998 l
485.70001 61.099998 l
h
486.39999 30.4 m
480.10001 48.700001 l
480 48.700001 l
473.5 30.4 l
486.39999 30.4 l
486.39999 30.4 l
h
W
0 0 693 78 rc
450.5 66.099998 m
509.39999 66.099998 l
509.39999 6.0999999 l
450.5 6.0999999 l
h
f
Q
q
495.20001 51.900002 m
495.20001 61.099998 l
536.20001 61.099998 l
536.20001 51.900002 l
521.20001 51.900002 l
521.20001 11.2 l
510.20001 11.2 l
510.20001 51.900002 l
495.20001 51.900002 l
h
W
0 0 693 78 rc
490.20001 66.099998 m
541.20001 66.099998 l
541.20001 6.1999998 l
490.20001 6.1999998 l
h
f
Q
q
551.40002 61.099998 m
551.40002 11.1 l
540.40002 11.1 l
540.40002 61.099998 l
551.40002 61.099998 l
h
W
0 0 693 78 rc
535.40002 66.099998 m
556.40002 66.099998 l
556.40002 6.0999999 l
535.40002 6.0999999 l
h
f
Q
q
556.59998 46.299999 m
557.70001 49.400002 559.29999 52.200001 561.40002 54.700001 c
563.5 57.099998 566.20001 59 569.09998 60.299999 c
575.70001 63 583.20001 63 589.79999 60.299999 c
592.70001 59 595.40002 57.099998 597.5 54.700001 c
599.59998 52.299999 601.29999 49.400002 602.29999 46.299999 c
603.40002 43 604 39.400002 603.90002 35.900002 c
603.90002 32.400002 603.40002 29 602.20001 25.700001 c
601.09998 22.700001 599.5 19.9 597.40002 17.5 c
595.29999 15.1 592.59998 13.3 589.70001 12 c
583.09998 9.3000002 575.70001 9.3000002 569 12 c
566.09998 13.3 563.40002 15.1 561.29999 17.5 c
559.20001 19.9 557.5 22.700001 556.5 25.700001 c
555.40002 29 554.79999 32.400002 554.79999 35.900002 c
554.79999 39.400002 555.40002 42.900002 556.59998 46.299999 c
h
566.59998 29.799999 m
567.09998 27.9 567.90002 26.1 569 24.5 c
570.09998 22.9 571.5 21.6 573.20001 20.700001 c
577.20001 18.799999 581.79999 18.799999 585.79999 20.700001 c
587.5 21.6 588.90002 22.9 590 24.5 c
591.09998 26.1 591.90002 27.9 592.29999 29.799999 c
592.79999 31.799999 593 33.900002 593 35.900002 c
593 38 592.79999 40.200001 592.29999 42.299999 c
591.90002 44.299999 591.09998 46.099998 590 47.799999 c
588.90002 49.400002 587.5 50.700001 585.79999 51.700001 c
581.79999 53.599998 577.20001 53.599998 573.20001 51.700001 c
571.5 50.799999 570.09998 49.5 569 47.799999 c
567.90002 46.099998 567.09998 44.299999 566.70001 42.299999 c
566.20001 40.200001 566 38.099998 566 35.900002 c
565.90002 33.799999 566.09998 31.799999 566.59998 29.799999 c
566.59998 29.799999 l
h
W
0 0 693 78 rc
549.79999 67.324997 m
608.91077 67.324997 l
608.91077 4.9749999 l
549.79999 4.9749999 l
h
f
Q
q
618.29999 61.099998 m
639.20001 27.6 l
639.29999 27.6 l
639.29999 61.099998 l
649.59998 61.099998 l
649.59998 11.1 l
638.59998 11.1 l
617.79999 44.599998 l
617.70001 44.599998 l
617.70001 11.1 l
607.40002 11.1 l
607.40002 61.099998 l
618.29999 61.099998 l
h
W
0 0 693 78 rc
602.40002 66.099998 m
654.59998 66.099998 l
654.59998 6.0999999 l
602.40002 6.0999999 l
h
f
Q
q
11 61.200001 m
11 20.5 l
35.299999 20.5 l
35.299999 11.3 l
0 11.3 l
0 61.299999 l
11 61.200001 l
h
W
0 0 693 78 rc
-5 66.300003 m
40.299999 66.300003 l
40.299999 6.3000002 l
-5 6.3000002 l
h
f
Q
q
69 61.200001 m
87.699997 11.2 l
76.199997 11.2 l
72.400002 22.4 l
53.799999 22.4 l
49.900002 11.3 l
38.799999 11.3 l
57.700001 61.299999 l
69 61.200001 l
h
69.599998 30.6 m
63.299999 48.900002 l
63.200001 48.900002 l
56.599998 30.6 l
69.599998 30.6 l
69.599998 30.6 l
h
W
0 0 693 78 rc
33.799999 66.300003 m
92.699997 66.300003 l
92.699997 6.1999998 l
33.799999 6.1999998 l
h
f
ep
end
%%Trailer
%%EOF
